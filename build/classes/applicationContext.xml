<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util  
     http://www.springframework.org/schema/util/spring-util-4.0.xsd 
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:ExTrace.cfg.xml">
		</property>
		<property name="hibernateProperties">
			<props>
			    <prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<!--prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop -->
			</props>
		</property>
		
		<!--扫描使用注解的包 -->
		<property name="packagesToScan">	<!--不知道为了什么,这里必须要有 -->
			<list>
				<value>ts.model</value>
				<value>ts.dao</value>
				<value>ts.daoImpl</value>
				<value>web.mvc.*</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置事务，使用代理的方式 -->
	<bean id="transactionProxy"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,-myException</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<bean id="userDao" class="ts.daoImpl.UserDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="transNodeDao" class="ts.daoImpl.TransNodeDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="regionDao" class="ts.daoImpl.RegionDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="customerDao" class="ts.daoImpl.CustomerDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="regionDao" ref="regionDao"></property>
	</bean>
	<bean id="expressSheetDao" class="ts.daoImpl.ExpressSheetDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="regionDao" ref="regionDao"></property>
	</bean>
	<bean id="packageDao" class="ts.daoImpl.PackageDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="transHistoryDao" class="ts.daoImpl.TransHistoryDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="userDao" ref="userDao"></property>
		<property name="packageDao" ref="packageDao"></property>
		<property name="distributeCenterDao" ref="distributeCenterDao"></property>
	</bean>
	<bean id="distributeCenterDao" class="ts.daoImpl.DistributeCenterDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	

	<!-- REST服务的注解例子 -->
	<jaxrs:server id="Service" address="/">
		<jaxrs:serviceBeans>
		    <!-- 配置MiscService中的属性dao -->
			<bean class="ts.serviceImpl.MiscService">
				<property name="transNodeDao" ref="transNodeDao"></property>	
				<property name="regionDao" ref="regionDao"></property>
				<property name="customerDao" ref="customerDao"></property>
				<property name="userDao" ref="userDao"></property>
			</bean>
			<bean class="ts.serviceImpl.DomainService">
			    <!-- 配置DomainService中的属性dao -->
				<property name="expressSheetDao" ref="expressSheetDao"></property>
				<property name="packageDao" ref="packageDao"></property>
				<property name="transHistoryDao" ref="transHistoryDao"></property>
				<property name="distributeCenterDao" ref="distributeCenterDao"></property>
				<property name="userDao" ref="userDao"></property>
			</bean>
		</jaxrs:serviceBeans>

		<jaxrs:extensionMappings>
			<entry key="json" value="application/json" />
			<entry key="xml" value="application/xml" />
		</jaxrs:extensionMappings>

		<jaxrs:providers>
			<ref bean="jsonProvider" />
			<bean class="ts.serviceException.InvokeFaultExceptionMapper" />
		</jaxrs:providers>
		<jaxrs:languageMappings>
			<entry key="en" value="en-gb" />
		</jaxrs:languageMappings>
	</jaxrs:server>

	<!-- JsonProvider的属性说明: 
	1. 	dropRootElement 默认为false，则Json格式会将类名作为第一个节点，
		如{Customer:{"id":123,"name":"John"}}，
		如果配置为true，则Json格式为{"id":123,"name":"John"}，
		而Gson等Json包会解析格式为后者。 
	2. 	dropCollectionWrapsperElement属性默认为false，
		则当遇到Collection时，Json会在集合中将容器中类名作为一个节点，
		比如{"Customer":{{"id":123,"name":"John"}}}，
		而设置为false，则JSon格式为{{"id":123,"name":"John"}} 
	3. 	serializeAsArray属性默认为false，则当遇到Collecion时，
		格式为{{"id":123,"name":"John"}}，
		如果设置为true，则格式为[{"id":123,"name":"john"}]，而Gson等解析为后者。 -->
	<util:list id="jsonKeys">
		<value>app</value>
		<value>comment</value>
	</util:list>

	<util:list id="jsonTypes">
		<value>application/json</value>
		<value>application/jettison</value>
	</util:list>
	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<!-- <property name="dropRootElement" value="true" /> <property name="dropCollectionWrapperElement" 
			value="true" /> <property name="serializeAsArray" value="true" /> -->
		<property name="serializeAsArray" value="true" />
		<property name="arrayKeys" ref="jsonKeys" />
		<property name="produceMediaTypes" ref="jsonTypes" />
		<property name="consumeMediaTypes" ref="jsonTypes" />
		<property name="ignoreNamespaces" value="true" />
		<property name="dropRootElement" value="true" />
		<property name="dropCollectionWrapperElement" value="true" />
		<property name="ignoreMixedContent" value="true" />
		<property name="supportUnwrapped" value="true" />
		<property name="attributesToElements" value="true" />
	</bean>

</beans>
